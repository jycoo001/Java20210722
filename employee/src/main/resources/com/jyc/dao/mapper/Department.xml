<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jyc.employee.dao.DepartmentDAO">
	<!-- 表示对AddressDAO接口的查询方法启用二级缓存，type属性用于指定缓存的实现类 -->
	<!--<cache type="org.mybatis.caches.caffeine.CaffeineCache" />-->
	
	<!-- 配置了一个sql片段 -->
	<sql id="DepartmentColumns">
		id,name,start_time,count,logo,address_id
	</sql>

	<!-- 配置查询结果集与对象之间的映射 -->
	<resultMap type="Department" id="DepartmentMap">
		<id property="id" column="id" />
		<result property="name" column="name" />
		<result property="startTime" column="start_time" />
		<result property="count" column="count" />
		<result property="logo" column="logo" />
		<association property="address" column="address_id"
			select="com.jyc.employee.dao.AddressDAO.findById" />
	</resultMap>

	<resultMap type="Department" id="DepartmentAllMap"
		extends="DepartmentMap">
		<collection property="employees" column="id"
			select="com.jyc.employee.dao.EmployeeDAO.selectByDepartmentId" />
	</resultMap>

	<!-- 查询所有学生，因为要分页，所以要指定排序字段 -->
	<!-- id要和dao接口中的方法名匹配 -->

	<select id="quertSelector" resultMap="DepartmentAllMap"
		parameterType="Department">
		select
		<include refid="DepartmentColumns" />
		from t_department
		<where>
			<if test="id!=null and id!=''">
				and id=#{id}
			</if>
			<if test="name!=null and name!=''">
				<bind name="likeName" value="'%'+name+'%'" />
				and `name` like #{likeName}
			</if>
			<if test="fromTo!=null and fromTo!=''">
				and start_time between #{start} and #{end}
			</if>
			<if test="count!=null and count!=''">
				and count=#{count}
			</if>
		</where>
		order by id
	</select>

	<select id="selectorOne" resultMap="DepartmentMap"
		parameterType="java.lang.Integer" useCache="true">
		select
		<include refid="DepartmentColumns" />
		from t_department
		where id=#{id}
	</select>

	<select id="selectorMany" resultMap="DepartmentMap"
		parameterType="java.util.List">
		select
		<include refid="DepartmentColumns" />
		from t_department
		where id in
		<foreach collection="ids" item="id" separator="," open="("
			close=")">
			#{id}
		</foreach>
	</select>

	<insert id="insert" parameterType="Department">
		insert into
		t_department(`name`,start_time,count,logo)
		value(#{name},#{startTime},#{count},logo)
	</insert>

	<update id="updateAll">
		update t_department d inner join (
		select
		department_id id,count(department_id) count from t_employee group by
		department_id
		) s on d.id=s.id
		set d.count=s.count
	</update>

	<update id="update" parameterType="Department">
		update t_department
		<set>
			<if test="name!=null and name!='' ">
				`name`=#{name},
			</if>
			<if test="logo!=null and logo!=''">
				logo=#{logo},
			</if>
		</set>
		where id=#{id}
	</update>

	<delete id="delete" parameterType="java.lang.Integer">
		delete from t_department where
		id=#{id}
	</delete>

	<delete id="deleteMany" parameterType="java.util.List">
		delete from t_department
		<where>
			id in
			<foreach collection="ids" item="id" separator="," open="("
				close=")">
				#{id}
			</foreach>
		</where>
	</delete>

</mapper>