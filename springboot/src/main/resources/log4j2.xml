<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出 -->
<!--monitorInterval：Log4j2能够自动检测修改配置文件并重新配置本身，设置刷新间隔秒数 -->
<!DOCTYPE Configuration>
<Configuration monitorInterval="5">
	<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

	<!--变量配置 -->
	<Properties>
		<!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符 -->
		<!-- %logger{36} 表示 Logger 名字最长36个字符 -->
		<property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n" />
		<!-- 定义日志存储的路径 -->
		<property name="FILE_PATH" value="d:/logs/springboot" />
		<property name="FILE_NAME" value="springboot" />
	</Properties>

	<!-- log4j2支持多种不同形式的appenders，包括控制台，文件，滚动文件，邮箱，数据库，Socket等，支持远程日志监控，详见官网文档 -->
	<Appenders>
		<Console name="Console" target="SYSTEM_OUT">
			<!--输出日志的格式 -->
			<PatternLayout pattern="${LOG_PATTERN}" />
			<!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）。注意：此处level设置的优先级要高于logger中的设置 -->
			<ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY" />
		</Console>

		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用 -->
		<File name="FileLog" fileName="${FILE_PATH}/test.log" append="false">
			<PatternLayout pattern="${LOG_PATTERN}" />
		</File>

		<!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="RollingFileError" fileName="${FILE_PATH}/error.log" filePattern="${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
			<PatternLayout pattern="${LOG_PATTERN}" />
			<Policies>
				<!--interval属性用来指定多久滚动一次，默认是1 hour -->
				<TimeBasedTriggeringPolicy interval="1" />
				<SizeBasedTriggeringPolicy size="10MB" />
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖 -->
			<DefaultRolloverStrategy max="15" />
		</RollingFile>

	</Appenders>

	<!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。 -->
	<!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效 -->
	<Loggers>
		<!-- 若是additivity设为false，则子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。 -->
		<!-- 由于在application.properties中配置了mybatis统一日志前缀，所以此处需要配合更改。 若想输出结果集等更详细的日志，可将level更改为trace -->
		<logger name="mybatis.dao" level="debug" additivity="false">
			<AppenderRef ref="Console" />
		</logger>

		<!-- 根logger -->
		<Root level="info">
			<appender-ref ref="Console" />
			<appender-ref ref="FileLog" />
			<appender-ref ref="RollingFileError" />
		</Root>
	</Loggers>
</Configuration>